{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport { connect } from \"react-redux\";\nimport { sendMessage } from \"../store/actions/message_action\";\n\nclass Contact extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      msgdone: false\n    });\n\n    _defineProperty(this, \"handleSubmit\", (values, actions) => {\n      this.props.dispatch(sendMessage(values)).then(() => {\n        this.setState({\n          msgdone: true\n        });\n        actions.setSubmitting(false);\n        actions.resetForm();\n      });\n    });\n\n    _defineProperty(this, \"handleRules\", values => {\n      let errors = {};\n\n      for (let prop in values) {\n        if (!values[prop]) {\n          errors[prop] = \"Required\";\n        }\n      }\n\n      const reg = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (!reg.test(values.email)) {\n        errors.email = \"Not a valid email\";\n      }\n\n      return errors;\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(ClearMessage());\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"title_page\"\n    }, __jsx(\"h1\", null, \"Contact us\")), __jsx(\"div\", {\n      className: \"content_wrapper\"\n    }, __jsx(\"div\", {\n      className: \"inner\"\n    }, __jsx(\"h1\", null, \"Feel free to contact us\"), !this.state.msgdone ? __jsx(Formik, {\n      initialValues: {\n        name: \"\",\n        email: \"\",\n        message: \"\"\n      },\n      validate: values => this.handleRules(values),\n      onSubmit: (values, actions) => this.handleSubmit(values, actions)\n    }, ({\n      errors,\n      values,\n      handleSubmit,\n      handleChange,\n      isSubmitting,\n      handleBlur,\n      touched\n    }) => __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"name\",\n      placeholder: \"Enter your name here\",\n      value: values.name,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }), errors.name && touched.name ? __jsx(\"div\", {\n      className: \"error_label\"\n    }, errors.name) : null), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Email\"), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"email\",\n      placeholder: \"Enter your email here\",\n      value: values.email,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }), errors.email && touched.email ? __jsx(\"div\", {\n      className: \"error_label\"\n    }, errors.email) : null), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Write a message right here\"), __jsx(\"textarea\", {\n      className: \"form-control\",\n      name: \"message\",\n      placeholder: \"your message\",\n      value: values.message,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }), errors.message && touched.message ? __jsx(\"div\", {\n      className: \"error_label\"\n    }, errors.message) : null), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      disabled: isSubmitting\n    }, \"Submit\"))) : __jsx(\"div\", null, \"We will contact you shortly\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    msg: state.msg\n  };\n};\n\nexport default connect(mapStateToProps)(Contact);","map":{"version":3,"sources":["E:/ProgramingTraining/Courses/2020/Coding Revolution Next Redux/pizzeria/pages/contact.js"],"names":["React","Component","Formik","connect","sendMessage","Contact","msgdone","values","actions","props","dispatch","then","setState","setSubmitting","resetForm","errors","prop","reg","test","email","componentWillUnmount","ClearMessage","render","state","name","message","handleRules","handleSubmit","handleChange","isSubmitting","handleBlur","touched","mapStateToProps","msg"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Formik } from \"formik\"\r\nimport { connect } from \"react-redux\"\r\nimport { sendMessage } from \"../store/actions/message_action\"\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    msgdone: false,\r\n  }\r\n\r\n  handleSubmit = (values, actions) => {\r\n    this.props.dispatch(sendMessage(values)).then(() => {\r\n      this.setState({\r\n        msgdone: true,\r\n      })\r\n      actions.setSubmitting(false)\r\n      actions.resetForm()\r\n    })\r\n  }\r\n\r\n  handleRules = (values) => {\r\n    let errors = {}\r\n\r\n    for (let prop in values) {\r\n      if (!values[prop]) {\r\n        errors[prop] = \"Required\"\r\n      }\r\n    }\r\n\r\n    const reg = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\n    if (!reg.test(values.email)) {\r\n      errors.email = \"Not a valid email\"\r\n    }\r\n\r\n    return errors\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.dispatch(ClearMessage())\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"title_page\">\r\n          <h1>Contact us</h1>\r\n        </div>\r\n        <div className=\"content_wrapper\">\r\n          <div className=\"inner\">\r\n            <h1>Feel free to contact us</h1>\r\n\r\n            {!this.state.msgdone ? (\r\n              <Formik\r\n                initialValues={{ name: \"\", email: \"\", message: \"\" }}\r\n                validate={(values) => this.handleRules(values)}\r\n                onSubmit={(values, actions) => this.handleSubmit(values, actions)}\r\n              >\r\n                {({ errors, values, handleSubmit, handleChange, isSubmitting, handleBlur, touched }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                      <label>Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter your name here\"\r\n                        value={values.name}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.name && touched.name ? <div className=\"error_label\">{errors.name}</div> : null}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>Email</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email here\"\r\n                        value={values.email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.email && touched.email ? <div className=\"error_label\">{errors.email}</div> : null}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>Write a message right here</label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"message\"\r\n                        placeholder=\"your message\"\r\n                        value={values.message}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      ></textarea>\r\n                      {errors.message && touched.message ? <div className=\"error_label\">{errors.message}</div> : null}\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>\r\n                      Submit\r\n                    </button>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            ) : (\r\n              <div>We will contact you shortly</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    msg: state.msg,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Contact)\r\n"]},"metadata":{},"sourceType":"module"}