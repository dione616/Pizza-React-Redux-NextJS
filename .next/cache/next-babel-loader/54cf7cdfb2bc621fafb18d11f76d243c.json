{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport auth0 from \"auth0-js\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport getConfig from \"next/config\";\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar Auth0 = /*#__PURE__*/function () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: \"dione616.eu.auth0.com\",\n      clientID: \"\".concat(publicRuntimeConfig.client_id),\n      redirectUri: \"\".concat(publicRuntimeConfig.base_url, \"/login-success\"),\n      responseType: \"token id_token\",\n      scope: \"openid\"\n    });\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Serv = new Auth0();\nexport default auth0Serv;","map":{"version":3,"sources":["E:/ProgramingTraining/Courses/2020/Coding Revolution Next Redux/pizzeria/lib/appAuth.js"],"names":["auth0","Cookies","axios","getConfig","publicRuntimeConfig","Auth0","WebAuth","domain","clientID","client_id","redirectUri","base_url","responseType","scope","handleAuthentication","bind","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","authorize","auth0Serv"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;iBACgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;IAEFC,K;AACJ,mBAAc;AAAA;;AACZ,SAAKL,KAAL,GAAa,IAAIA,KAAK,CAACM,OAAV,CAAkB;AAC7BC,MAAAA,MAAM,EAAE,uBADqB;AAE7BC,MAAAA,QAAQ,YAAKJ,mBAAmB,CAACK,SAAzB,CAFqB;AAG7BC,MAAAA,WAAW,YAAKN,mBAAmB,CAACO,QAAzB,mBAHkB;AAI7BC,MAAAA,YAAY,EAAE,gBAJe;AAK7BC,MAAAA,KAAK,EAAE;AALsB,KAAlB,CAAb;AAOA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;;;2CAEsB;AAAA;;AACrB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,KAAI,CAAClB,KAAL,CAAWmB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACxC,cAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,YAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACAJ,YAAAA,OAAO;AACR,WAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,YAAAA,MAAM;AACP;AACF,SAPD;AAQD,OATM,CAAP;AAUD;;;+BAEUG,U,EAAY;AACrB,UAAII,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeN,UAAU,CAACO,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EAA7C,CAAhB;AACD;;;4BACO;AACN,WAAK9B,KAAL,CAAW+B,SAAX;AACD;;;;;;AAEH,IAAMC,SAAS,GAAG,IAAI3B,KAAJ,EAAlB;AACA,eAAe2B,SAAf","sourcesContent":["import auth0 from \"auth0-js\"\r\nimport Cookies from \"js-cookie\"\r\nimport axios from \"axios\"\r\n\r\nimport getConfig from \"next/config\"\r\nconst { publicRuntimeConfig } = getConfig()\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: \"dione616.eu.auth0.com\",\r\n      clientID: `${publicRuntimeConfig.client_id}`,\r\n      redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\r\n      responseType: \"token id_token\",\r\n      scope: \"openid\",\r\n    })\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  setSession(authResult) {\r\n    let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime())\r\n  }\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n}\r\nconst auth0Serv = new Auth0()\r\nexport default auth0Serv\r\n"]},"metadata":{},"sourceType":"module"}