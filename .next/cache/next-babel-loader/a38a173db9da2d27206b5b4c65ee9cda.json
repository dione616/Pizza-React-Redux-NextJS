{"ast":null,"code":"import auth0 from \"auth0-js\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport jwt from \"jsonwebtoken\";\nimport getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: \"dione616.eu.auth0.com\",\n      clientID: `${publicRuntimeConfig.client_id}`,\n      redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n      responseType: \"token id_token\",\n      scope: \"openid\"\n    }); //if call from another context, need to bind or arrow func\n\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject();\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n    Cookies.set(\"x-jwt-exp\", expiresAt);\n    Cookies.set(\"x-jwt\", authResult.idToken);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  async getJWKS() {\n    const res = await axios.get(\"https://dione616.eu.auth0.com/.well-known/jwks.json\");\n    const jwks = res.data;\n    console.log(jwks);\n    return jwks;\n  }\n\n  certToPEM(cert) {\n    cert = cert.match(/.{1,64}/g).join(\"\\n\");\n    cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n------END CERTIFICATE\\n`;\n    return cert;\n  }\n\n  async verifyToken(token) {\n    if (token) {\n      const jwks = await this.getJWKS();\n      const certificate = this.certToPEM(jwks.keys[0].x5c[0]); //first position data\n\n      try {\n        const decodedVerify = jwt.verify(token, certificate); //verify if token is correct\n\n        const expiresAt = decodedVerify.exp * 1000;\n        console.log(decodedVerify);\n        return decodedVerify && new Date().getTime() < expiresAt ? true : false;\n      } catch {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  async isAuthenticated(req) {\n    if (false) {\n      //if on the client\n      const token = Cookies.get(\"x-jwt\"); //get cookie with name\n\n      const verifyToken = await this.verifyToken(token);\n      return verifyToken;\n    } else {//server\n    }\n  }\n\n}\n\nconst auth0Serv = new Auth0();\nexport default auth0Serv;","map":{"version":3,"sources":["E:/ProgramingTraining/Courses/2020/Coding Revolution Next Redux/pizzeria/lib/appAuth.js"],"names":["auth0","Cookies","axios","jwt","getConfig","publicRuntimeConfig","Auth0","constructor","WebAuth","domain","clientID","client_id","redirectUri","base_url","responseType","scope","handleAuthentication","bind","isAuthenticated","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","login","authorize","getJWKS","res","get","jwks","data","console","log","certToPEM","cert","match","join","verifyToken","token","certificate","keys","x5c","decodedVerify","verify","exp","req","auth0Serv"],"mappings":"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","sourcesContent":["import auth0 from \"auth0-js\"\r\nimport Cookies from \"js-cookie\"\r\nimport axios from \"axios\"\r\nimport jwt from \"jsonwebtoken\"\r\n\r\nimport getConfig from \"next/config\"\r\nconst { publicRuntimeConfig } = getConfig()\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: \"dione616.eu.auth0.com\",\r\n      clientID: `${publicRuntimeConfig.client_id}`,\r\n      redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\r\n      responseType: \"token id_token\",\r\n      scope: \"openid\",\r\n    })\r\n    //if call from another context, need to bind or arrow func\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n    this.isAuthenticated = this.isAuthenticated.bind(this)\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  setSession(authResult) {\r\n    let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime())\r\n    Cookies.set(\"x-jwt-exp\", expiresAt)\r\n    Cookies.set(\"x-jwt\", authResult.idToken)\r\n  }\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n\r\n  async getJWKS() {\r\n    const res = await axios.get(\"https://dione616.eu.auth0.com/.well-known/jwks.json\")\r\n\r\n    const jwks = res.data\r\n    console.log(jwks)\r\n    return jwks\r\n  }\r\n\r\n  certToPEM(cert) {\r\n    cert = cert.match(/.{1,64}/g).join(\"\\n\")\r\n    cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n------END CERTIFICATE\\n`\r\n    return cert\r\n  }\r\n\r\n  async verifyToken(token) {\r\n    if (token) {\r\n      const jwks = await this.getJWKS()\r\n      const certificate = this.certToPEM(jwks.keys[0].x5c[0]) //first position data\r\n\r\n      try {\r\n        const decodedVerify = jwt.verify(token, certificate) //verify if token is correct\r\n        const expiresAt = decodedVerify.exp * 1000\r\n\r\n        console.log(decodedVerify)\r\n\r\n        return decodedVerify && new Date().getTime() < expiresAt ? true : false\r\n      } catch {\r\n        return false\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  async isAuthenticated(req) {\r\n    if (process.browser) {\r\n      //if on the client\r\n      const token = Cookies.get(\"x-jwt\") //get cookie with name\r\n      const verifyToken = await this.verifyToken(token)\r\n      return verifyToken\r\n    } else {\r\n      //server\r\n    }\r\n  }\r\n}\r\nconst auth0Serv = new Auth0()\r\nexport default auth0Serv\r\n"]},"metadata":{},"sourceType":"module"}