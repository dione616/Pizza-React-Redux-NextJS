{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport { connect } from \"react-redux\";\nimport { sendMessage, clearMessage } from \"../store/actions/message_action\";\n\nvar Contact = /*#__PURE__*/function (_Component) {\n  _inherits(Contact, _Component);\n\n  var _super = _createSuper(Contact);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      msgDone: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (values, actions) {\n      /* this.props.dispatch(sendMessage(values)).then(() => {\r\n        this.setState({ msgDone: true })\r\n        actions.setSubmitting(false)\r\n        actions.resetForm()\r\n      }) */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRules\", function (values) {\n      var errors = {};\n\n      for (var prop in values) {\n        if (!values[prop]) {\n          errors[prop] = \"Required\";\n        }\n      }\n\n      var reg = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (!reg.test(values.email)) {\n        errors.email = \"Not a valid email\";\n      }\n\n      return errors;\n    });\n\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"title_page\"\n      }, __jsx(\"h1\", null, \"Contact Us\")), __jsx(\"div\", {\n        className: \"content_wrapper\"\n      }, __jsx(\"div\", {\n        className: \"inner\"\n      }, __jsx(\"h1\", null, \"Feel free to contact us\"), !this.state.msgDone ? __jsx(Formik, {\n        initialValues: {\n          name: \"\",\n          email: \"\",\n          message: \"\"\n        },\n        validate: function validate(values) {\n          return _this2.handleRules(values);\n        },\n        onSubmit: function onSubmit(values, actions) {\n          return _this2.handleSubmit(values, actions);\n        }\n      }, function (_ref) {\n        var errors = _ref.errors,\n            values = _ref.values,\n            handleSubmit = _ref.handleSubmit,\n            handleChange = _ref.handleChange,\n            isSubmitting = _ref.isSubmitting,\n            handleBlur = _ref.handleBlur,\n            touched = _ref.touched;\n        return __jsx(\"form\", {\n          onSubmit: handleSubmit\n        }, __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: \"name\",\n          placeholder: \"Enter your name\",\n          value: values.name,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.name && touched.name ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.name) : null), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: \"email\",\n          placeholder: \"Enter your email\",\n          value: values.email,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.email && touched.email ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.email) : null), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"textarea\", {\n          className: \"form-control\",\n          name: \"message\",\n          placeholder: \"Enter your message\",\n          value: values.message,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.message && touched.message ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.message) : null), __jsx(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          disabled: isSubmitting\n        }, \"Submit\"));\n      }) : __jsx(\"h2\", null, \"Already sent\"))));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    msg: state.msg\n  };\n};\n\nexport default connect(mapState)(Contact);","map":{"version":3,"sources":["E:/ProgramingTraining/Courses/2020/Coding Revolution Next Redux/pizzeria/pages/contact.js"],"names":["React","Component","Formik","connect","sendMessage","clearMessage","Contact","msgDone","values","actions","errors","prop","reg","test","email","state","name","message","handleRules","handleSubmit","handleChange","isSubmitting","handleBlur","touched","mapState","msg"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Formik } from \"formik\"\r\nimport { connect } from \"react-redux\"\r\nimport { sendMessage, clearMessage } from \"../store/actions/message_action\"\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    msgDone: false,\r\n  }\r\n  handleSubmit = (values, actions) => {\r\n    /* this.props.dispatch(sendMessage(values)).then(() => {\r\n      this.setState({ msgDone: true })\r\n      actions.setSubmitting(false)\r\n      actions.resetForm()\r\n    }) */\r\n  }\r\n\r\n  handleRules = (values) => {\r\n    let errors = {}\r\n\r\n    for (let prop in values) {\r\n      if (!values[prop]) {\r\n        errors[prop] = \"Required\"\r\n      }\r\n    }\r\n\r\n    const reg = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\n    if (!reg.test(values.email)) {\r\n      errors.email = \"Not a valid email\"\r\n    }\r\n\r\n    return errors\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"title_page\">\r\n          <h1>Contact Us</h1>\r\n        </div>\r\n        <div className=\"content_wrapper\">\r\n          <div className=\"inner\">\r\n            <h1>Feel free to contact us</h1>\r\n            {!this.state.msgDone ? (\r\n              <Formik\r\n                initialValues={{ name: \"\", email: \"\", message: \"\" }}\r\n                validate={(values) => this.handleRules(values)}\r\n                onSubmit={(values, actions) => this.handleSubmit(values, actions)}\r\n              >\r\n                {({ errors, values, handleSubmit, handleChange, isSubmitting, handleBlur, touched }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter your name\"\r\n                        value={values.name}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.name && touched.name ? <div className=\"error_label\">{errors.name}</div> : null}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email\"\r\n                        value={values.email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.email && touched.email ? <div className=\"error_label\">{errors.email}</div> : null}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"message\"\r\n                        placeholder=\"Enter your message\"\r\n                        value={values.message}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      ></textarea>\r\n                      {errors.message && touched.message ? <div className=\"error_label\">{errors.message}</div> : null}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>\r\n                      Submit\r\n                    </button>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            ) : (\r\n              <h2>Already sent</h2>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = (state) => ({\r\n  msg: state.msg,\r\n})\r\nexport default connect(mapState)(Contact)\r\n"]},"metadata":{},"sourceType":"module"}